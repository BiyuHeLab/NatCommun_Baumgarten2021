clear

% % code for estimating good sigmas for each level of beta
% % histogram should be roughly centered on red line (desired range of
% % series, which is log(880) - log(220) = log(4)
% N = 33;
% sig = 3;
% beta = .99;
% if beta > 1
%     H = (beta-1)/2;
% else
%     H = (beta+1)/2;
% end
% 
% for j=1:1000
%     [BB xx(j,:)] = synthfbmcircul2(N, H, sig);
% end
% r=range(xx,2);
% figure; hist(r); hold on; plot([log(4) log(4)],[0 50],'r-','LineWidth',3);

% betas   = [0 .5 1.01 1.5 2];
% sigma2s = [.11 .13 .21 .09 .03]; 
% sigma2s = [.077 .086 .149 .039 .00985]; 

betas = [0.5 0.99 1.5];
sigma2s = [.13 3 .09];

for i_b = 1:length(betas)

% parameters for converging_prediction
beta    = betas(i_b);
sigma2  = sigma2s(i_b);
k       = 33;
% k       = 100;
nSeries = 1e3;
doPlot  = 1;

range_w     = 4;
range_delta = .01;

min_v = log(220);

report = 2;

if beta==0 || beta==2

    end_w = 2;
    end_delta = .02;
    [series{i_b} series_pred{i_b} pred_err{i_b} fGns{i_b}] = ...
        converging_prediction_log(beta, sigma2, k, nSeries, range_w, range_delta, end_w, end_delta, min_v, doPlot, report);

else
    
    end_w = log(440);
    end_delta = .01;
    [series{i_b} series_pred{i_b} pred_err{i_b} fGns{i_b}] = ...
        converging_prediction_log2(beta, sigma2, k, nSeries, range_w, range_delta, end_w, end_delta, min_v, doPlot, report);

end
% v_f=0;
% [series{i_b} series_pred{i_b} pred_err{i_b} fGns{i_b}] = converging_prediction(beta, sigma2, k, doPlot, nSeries, [], v_f);


% select series that are tolerably close to the desired value range
% Hz_max = 880;
% Hz_min = 220;
% 
% r_target = log(Hz_max - Hz_min + 1);
% r_delta  = .01;
r_target = log(range_w);
ranges   = range(series{i_b}');
% 
% % r_target = Hz_max - Hz_min;
% % r_delta  = 5;
% % ranges   = range(exp(series{i_b})');
% 
% inRange    = abs( ranges - r_target ) <= r_delta;
% pgood(i_b) = sum(inRange) / nSeries;

% series_r{i_b}      = series{i_b}(inRange',:);
% series_pred_r{i_b} = series_pred{i_b}(inRange',:);
% pred_err_r{i_b}    = pred_err{i_b}(inRange',:);
series_r{i_b}      = series{i_b};
series_pred_r{i_b} = series_pred{i_b};
pred_err_r{i_b}    = pred_err{i_b};

% select series that have smallest, largest, and median deflections for the
% predicted k+1'th sample
% (select randomly for beta=0 and beta=2)
if beta==0 || beta==2
%     randInds = randperm(sum(inRange));
    randInds = randperm(nSeries);
    minInd = randInds(1);
    maxInd = randInds(2);
    medInd = randInds(3);
    
else   
    [m minInd] = min(series_pred_r{i_b});
    [m maxInd] = max(series_pred_r{i_b});
    [m medInd] = min( abs(series_pred_r{i_b} - median(series_pred_r{i_b})) );

end

inds = [minInd maxInd medInd];

series_rp{i_b}      = series_r{i_b}(inds',:);
series_pred_rp{i_b} = series_pred_r{i_b}(inds',:);
pred_err_rp{i_b}    = pred_err_r{i_b}(inds',:);



% % plot the ranges for the series generated by converging_prediction
% % alongside the desired range value
% figure; hold on;
% plot([mean(ranges) mean(ranges)],[0 300],'g-','LineWidth',3)
% plot([r_target r_target],[0 300],'r-','LineWidth',3)
% hist(ranges);
% % set(h,'XScale','log');
% plot([mean(ranges) mean(ranges)],[0 300],'g-','LineWidth',3)
% plot([r_target r_target],[0 300],'r-','LineWidth',3)
% 
% legend('mean range value','desired range value');
% title(['distribution of ranges, beta = ' num2str(beta)]);
% xlabel('range')


% plot the ranges for the series generated by converging_prediction
% alongside the desired range value
figure; hold on;
h=20;
plot([median(ranges) median(ranges)],[0 h],'g-','LineWidth',2)
plot([r_target r_target],[0 h],'r-','LineWidth',2)
hist(ranges);
% set(h,'XScale','log');
plot([median(ranges) median(ranges)],[0 h],'g-','LineWidth',2)
plot([r_target r_target],[0 h],'r-','LineWidth',2)

legend(['median range value = ' num2str(median(ranges))],['desired range value = ' num2str((r_target))]);
title(['distribution of ranges (log scale), beta = ' num2str(beta) ', sigma2 = ' num2str(sigma2)]);
xlabel('range (log scale)')

% % plot the series that have ranges within r_delta of r_target
% figure; hold on;
% for j=1:sum(inRange)
%     plot(1:k,series_r{i_b}(j,:),'b-');
%     plot(k+1,series_pred_r{i_b}(j),'r.');
% end
% title(['selected for range, beta = ' num2str(beta)])


% plot the series that have ranges within r_delta of r_target
% and have the max, min, and median series prediction values
figure;
col = {'r' 'g' 'b'};
% subplot(211); hold on;
hold on;
for j = 1:length(inds)
    plot(1:k, series_rp{i_b}(j,:), [col{j} '-'],'LineWidth',2);
    plot(k+1, series_pred_rp{i_b}(j), [col{j} '*'], 'MarkerSize',5);
end
title(['selected for range and predicted sample, beta = ' num2str(beta)])

% subplot(212); hold on;
% for j = 1:length(inds)
%     plot(1:k, exp(series_rp{i_b}(j,:)), [col{j} '-'],'LineWidth',2);
%     plot(k+1, exp(series_pred_rp{i_b}(j)), [col{j} '*'], 'MarkerSize',5);
%     plot([1 k], 880*[1 1], 'k--');
%     plot([1 k], 220*[1 1], 'k--');
% end
% title(['selected for range and predicted sample, beta = ' num2str(beta)])

end

save series_selection_H.01_beta.99_1000.mat